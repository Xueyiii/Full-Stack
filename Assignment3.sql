--Question:
--1. I prefer using JOIN since usually join will have a better perforamnce than subquery.

--2. CTE is common table expression, which is a temporary result set. It can make quary more readable.

--3. Table variable is a type of the local variable that helps to store data temporarily. It provides all the properties of the local variables.
--The scope of a table variable is limited to the specific batch. Within its scope, a table can be used like a regular table.
--It may be applied anywhere a table or table expression in used in SELECT, INSERT, UPDATE, and DELETE statement.

--4. DELETE is a DML command, it can be used for deleting the specidic data. We can rollback the changes.
-- Truncate is a DDL command, it can be used to delete the entire data of the table without maintaining the integrity of table.We can't rollback the changes.
--For the performance, DELETE is slower than TRUNCATE.

--5. An identity column is a column (also known as a field) in a database table that is made up of values generated by the database.
-- When the DELETE statement is executed without WHERE clause it will delete all the rows.
-- When the TRUNCATE statement is executed it will remove all the rows.

--6. delete from table_name: it can be used for deleting the specidic data.
-- truncate table table_name: it can be used to delete the entire data of the table without maintaining the integrity of table.

--Queries:
--1.	List all cities that have both Employees and Customers.
SELECT DISTINCT e.City
FROM Employees e
INNER JOIN Customers c
ON c.City = e.City

--2.	List all cities that have Customers but no Employee.
--a.	Use sub-query
SELECT DISTINCT City
FROM Customers
WHERE City NOT IN 
(SELECT City FROM Employees)

--b.	Do not use sub-query
SELECT DISTINCT c.City
FROM Employees e
RIGHT JOIN Customers c
ON c.City = e.City
WHERE e.City IS NULL

--3.	List all products and their total order quantities throughout all orders.
SELECT p.ProductName, SUM(od.Quantity) AS Number
FROM Products p
INNER JOIN [Order Details] od
ON p.ProductID = od.ProductID
GROUP BY ProductName

--4.	List all Customer Cities and total products ordered by that city.
SELECT c.City, SUM(od.Quantity) AS Number
FROM Customers c
LEFT JOIN Orders o
ON c.CustomerID = o.CustomerID 
LEFT JOIN [Order Details] od
ON od.OrderID = o.OrderID
GROUP BY c.City
ORDER BY Number DESC

--5.	List all Customer Cities that have at least two customers.
--a.	Use union
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(City) = 2
UNION
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(City) > 2
--b.	Use sub-query and no union
SELECT DISTINCT City
FROM Customers
WHERE City IN 
(SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(City) >= 2)

--6.	List all Customer Cities that have ordered at least two different kinds of products.
SELECT c.City
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID 
INNER JOIN [Order Details] od
ON od.OrderID = o.OrderID
GROUP BY c.City, od.ProductID
HAVING COUNT(od.ProductID) > 2

--7.	List all Customers who have ordered products, but have the ‘ship city’ on the order different from their own customer cities.
SELECT DISTINCT c.ContactName
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
WHERE c.City != o.ShipCity

--8.	List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
SELECT * FROM
(SELECT t.ProductID, t.Average, t.ShipCity,t.Number, RANK() OVER(ORDER BY t.Number) RNK
FROM
(SELECT TOP 5 od.ProductID, o.ShipCity, SUM(od.Quantity) AS Number, AVG(od.UnitPrice) AS Average
FROM Orders o
LEFT JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY o.ShipCity, od.ProductID
ORDER BY Number DESC)t )t2

--9.	List all cities that have never ordered something but we have employees there.
--a.	Use sub-query
SELECT DISTINCT City
FROM Employees
WHERE City NOT IN 
(SELECT c.City
FROM Orders o
INNER JOIN Customers c
ON c.CustomerID = o.CustomerID)

--b.	Do not use sub-query
SELECT DISTINCT e.City
FROM Employees e
LEFT JOIN Customers c
ON e.City = c.City
WHERE c.City IS NULL

--10.  List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, 
--and also the city of most total quantity of products ordered from. 
SELECT * 
FROM 
(SELECT TOP 1 e.City, COUNT(o.OrderID) AS OrderOfCount
FROM Employees e
INNER JOIN Orders o
ON e.EmployeeID = o.EmployeeID
GROUP BY e.City) t
INNER JOIN
(SELECT TOP 1 c.City, COUNT(od.Quantity) AS OrderOfCount
FROM [Order Details] od
INNER JOIN Orders o
ON od.OrderID = o.OrderID
INNER JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.City) t2
ON t.City = t2.City

--11. 
--Identify which rows have duplicate values:
SELECT * 
FROM T1
GROUP BY col1, col2
HAVING COUNT(*)>1
--DELECT
SET ROWCOUNT 1
DELECT FROM T1
WHERE col1 =1 AND col2 = 1

--12.  Find employees who do not manage anybody.
SELECT e.empid
FROM Employee e
LEFT JOIN Dept d
ON e.deptid = d.deptid
WHERE d.deptid IS NULL

--13.  Find departments that have maximum number of employees.
SELECT de.deptname, de.NumOfEmp
FROM 
(SELECT d.deptname, COUNT(DISTINCT e.empid) AS NumOfEmp, 
RANK()OVER(PARTITION BY d.deptname ORDER BY COUNT(DISTINCT e.empid)) AS RNK
FROM Dept d INNER JOIN Employee e ON d.deptid = e.deptid) de

--14. Find top 3 employees (salary based) in every department.
SELECT de.deptname, de.empid, de.RNK
FROM 
(SELECT d.deptname, e.empid, e.Salary,
RANK()OVER(PARTITION BY d.deptname ORDER BY SUM(e.salary) DESC) AS RNK
FROM Dept d INNER JOIN Employee e
ON d.deptid = e.deptid) de
WHERE RNK <= 3
ORDER BY de.deptname, RNK